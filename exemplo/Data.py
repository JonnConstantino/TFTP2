# automatically generated by the FlatBuffers compiler, do not modify

# namespace: exemplo

import flatbuffers

class Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Data()
        x.Init(buf, n + offset)
        return x

    # Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Data
    def Opcode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Data
    def Block(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Data
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DataStart(builder): builder.StartObject(3)
def DataAddOpcode(builder, opcode): builder.PrependInt32Slot(0, opcode, 0)
def DataAddBlock(builder, block): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(block), 0)
def DataAddData(builder, data): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def DataEnd(builder): return builder.EndObject()
